frameworkVersion: '>=1.26.0 <2.0.0'

service: ${opt:unique-prefix}-global-cfn-importer-supported

provider:
  name: aws
  runtime: nodejs8.10
  memorySize: 1024
  stackName: ${opt:unique-prefix}-global-cfn-importer-supported-${opt:region}
  timeout: 30
  tracing: true
  deploymentBucket:
      name: ${opt:unique-prefix}-export-import-serverless-${opt:region}
      serverSideEncryption: AES256
      tags:
        Purpose: 'serverless deployment'
        Category: utility
  stackTags:
    Name: ${opt:unique-prefix}.${self:service}
    Purpose: ${self:service}
  stackPolicy:
    - Effect: Allow
      Principal: '*'
      Action: Update:*
      Resource: '*'

resources:
  Resources:
    # SNS
    ExporterNotificationTopic:
      Type: "AWS::SNS::Topic"
      Properties:
        DisplayName:
          Fn::Join:
            - '-'
            - - '${opt:unique-prefix}'
              - 'ExporterTopic'
              - Ref: 'AWS::Region'
        TopicName: 
          Fn::Join:
            - '-'
            - - '${opt:unique-prefix}'
              - 'global-exporter-notification'
              - Ref: 'AWS::Region'        

    ExporterNotificationSubscription: 
      Type: "AWS::SNS::Subscription"
      Properties:
        Endpoint: 
          Fn::Join:
            - ''
            - - 'arn:aws:lambda:'
              - '${opt:primary-region}'
              - ':'
              - Ref: 'AWS::AccountId'
              - ':function:'
              - '${opt:unique-prefix}-global-cfn-exporter'
        Protocol: "lambda"
        TopicArn: 
          Ref: ExporterNotificationTopic

    # LAMBDA
    RegionalImporter:
      Type: "AWS::Lambda::Function"
      Properties:
        Code:
          ZipFile: |
            const response = require('cfn-response');
            const AWS = require('aws-sdk');
            exports.handler = (event, context, callback) => {
              console.log('event: ', event);
              const { ResourceProperties } = event;
              console.log('ResourceProperties: ', ResourceProperties);
              const { toRegion, name } = ResourceProperties;
              const bucket = '${opt:export-import-bucket}/cfn-exporter-importer/' + toRegion;
              const key = 'exports-' + toRegion +'.json';
              let found = {};
              (async () => {
                let data = await getJson(toRegion, bucket, key);
                data = JSON.parse(data.Body.toString());
                console.log('all exports: ', data);
                if (name) {
                  found = data.find((item) => item.Name === name);
                  console.log('Found item: ', found);
                } else {
                  return data;
                }
                if (found.length === 1) {
                  return { found };
                } else {
                  return new Error('No such key!');
                }
              })()
              .then(() => {
                console.log("found:", found);
                response.send(event, context, response.SUCCESS, { ...found });
              })
              .catch(err => {
                console.error(err);
                response.send(event, context, response.FAILED, { err });
              });
            }
            async function getJson (region, bucket, key) {
              const s3 = new AWS.S3({region: region});
              const params = {
                Bucket: bucket,
                Key: key
              };
              return s3.getObject(params).promise();
            }
        FunctionName: 
          Fn::Join:
            - '-'
            - - '${opt:unique-prefix}'
              - 'cfn-importer'
              - Ref: 'AWS::Region'
        Handler: 'index.handler'
        Role:
          Fn::Join:
            - ''
            - - 'arn:aws:iam::'
              - Ref: 'AWS::AccountId'
              - ':role/'
              - '${opt:unique-prefix}-global-cfn-export-import-lambda-execution'
        Runtime: nodejs8.10
        MemorySize: 256
        Timeout: 180

  Outputs:
    RegionalImporterArn:
      Value: !GetAtt RegionalImporter.Arn
      Export:
        Name: 
          Fn::Join:
            - '-'
            - - '${opt:unique-prefix}'
              - 'RegionalImporterArn'
              - Ref: 'AWS::Region'
    ExporterNotificationArn:
      Value: 
        Ref: ExporterNotificationTopic
      Export: 
        Name: 
          Fn::Join:
            - '-'
            - - '${opt:unique-prefix}'
              - 'ExporterNotificationTopicArn'
              - Ref: 'AWS::Region'
